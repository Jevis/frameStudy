package com.zbao.news.greendao.entity;

import com.zbao.news.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.zbao.news.greendao.dao.PatientDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PATIENT".
 */
public class Patient {

    private Long id;
    private String PATIENT_ID;
    private String PARENT_DOCTOR_ID;
    private String SUPER_DOCTOR_ID;
    private Long primary_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PatientDao myDao;

    private Patient patient;
    private Long patient__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Patient() {
    }

    public Patient(Long id) {
        this.id = id;
    }

    public Patient(Long id, String PATIENT_ID, String PARENT_DOCTOR_ID, String SUPER_DOCTOR_ID, Long primary_id) {
        this.id = id;
        this.PATIENT_ID = PATIENT_ID;
        this.PARENT_DOCTOR_ID = PARENT_DOCTOR_ID;
        this.SUPER_DOCTOR_ID = SUPER_DOCTOR_ID;
        this.primary_id = primary_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPatientDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPATIENT_ID() {
        return PATIENT_ID;
    }

    public void setPATIENT_ID(String PATIENT_ID) {
        this.PATIENT_ID = PATIENT_ID;
    }

    public String getPARENT_DOCTOR_ID() {
        return PARENT_DOCTOR_ID;
    }

    public void setPARENT_DOCTOR_ID(String PARENT_DOCTOR_ID) {
        this.PARENT_DOCTOR_ID = PARENT_DOCTOR_ID;
    }

    public String getSUPER_DOCTOR_ID() {
        return SUPER_DOCTOR_ID;
    }

    public void setSUPER_DOCTOR_ID(String SUPER_DOCTOR_ID) {
        this.SUPER_DOCTOR_ID = SUPER_DOCTOR_ID;
    }

    public Long getPrimary_id() {
        return primary_id;
    }

    public void setPrimary_id(Long primary_id) {
        this.primary_id = primary_id;
    }

    /** To-one relationship, resolved on first access. */
    public Patient getPatient() {
        Long __key = this.primary_id;
        if (patient__resolvedKey == null || !patient__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PatientDao targetDao = daoSession.getPatientDao();
            Patient patientNew = targetDao.load(__key);
            synchronized (this) {
                patient = patientNew;
            	patient__resolvedKey = __key;
            }
        }
        return patient;
    }

    public void setPatient(Patient patient) {
        synchronized (this) {
            this.patient = patient;
            primary_id = patient == null ? null : patient.getId();
            patient__resolvedKey = primary_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
